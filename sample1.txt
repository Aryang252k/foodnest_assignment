Below are several sample user questions related to the MongoDB document provided, 
and the corresponding MongoDB aggregation pipeline queries in json that can be used to fetch the desired data.
Use them wisely.

  

Question 1: John Doe, what can I have fast and tasty.

Query:
json
[
    { "$match": { "name": "John Doe" } },
    { "$unwind": "$addresses" },
    { 
        "$lookup": {
            "from": "restaurants",
            "let": { "userLocation": "$addresses.googlePin" },
            "pipeline": [
                {
                    "$addFields": {
                        "distance": {
                            "$sqrt": {
                                "$sum": [
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 0] }, { "$arrayElemAt": [{ "$map": { "input": { "$split": ["$$userLocation", ","] }, "as": "coord", "in": { "$convert": { "input": "$$coord", "to": "double" } } } }, 0] }] }, 2] },
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 1] }, { "$arrayElemAt": [{ "$map": { "input": { "$split": ["$$userLocation", ","] }, "as": "coord", "in": { "$convert": { "input": "$$coord", "to": "double" } } } }, 1] }] }, 2] }
                                ]
                            }
                        }
                    }
                },
                { "$sort": { "distance": 1 } },
                { "$limit": 1 }
            ],
            "as": "nearestRestaurant"
        }
    },
    { "$unwind": "$nearestRestaurant" },
    { "$unwind": "$nearestRestaurant.menu" },
    { 
        "$group": {
            "_id": "$_id",
            "nearestRestaurant": { "$first": "$nearestRestaurant" },
            "suggestedDishes": { "$push": "$nearestRestaurant.menu" }
        }
    },
    { 
        "$project": {
            "nearestRestaurant": 1,
            "suggestedDishes": { "$slice": ["$suggestedDishes", 4] }
        }
    }
]



Question 2: What is price of Gulab Jamun?

Query:
json
[
    { "$match": { "name": "user_name" } },
    { "$unwind": "$addresses" },
    { 
        "$lookup": {
            "from": "restaurants",
            "let": { "userLocation": "$addresses.googlePin" },
            "pipeline": [
                {
                    "$addFields": {
                        "distance": {
                            "$sqrt": {
                                "$sum": [
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 0] }, { "$arrayElemAt": [{ "$map": { "input": { "$split": ["$$userLocation", ","] }, "as": "coord", "in": { "$convert": { "input": "$$coord", "to": "double" } } } }, 0] }] }, 2] },
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 1] }, { "$arrayElemAt": [{ "$map": { "input": { "$split": ["$$userLocation", ","] }, "as": "coord", "in": { "$convert": { "input": "$$coord", "to": "double" } } } }, 1] }] }, 2] }
                                ]
                            }
                        }
                    }
                },
                { "$sort": { "distance": 1 } },
                { "$limit": 1 }
            ],
            "as": "nearestRestaurant"
        }
    },
    { "$unwind": "$nearestRestaurant" },
    { "$unwind": "$nearestRestaurant.menu" },
    { "$match": { "nearestRestaurant.menu.dish": "Gulab Jamun" } },
    { "$project": {
        "_id": 0,
        "dish": "$nearestRestaurant.menu.dish",
        "price": "$nearestRestaurant.menu.price",
        "portion": "$nearestRestaurant.menu.portion"
    }},
    {
        "$match": { "name": "Gulab Jamun" }
    },
    {
        "$lookup": {
            "from": "fs.files",
            "localField": "image_id",
            "foreignField": "_id",
            "as": "file_info"
        }
    },
    {
        "$unwind": "$file_info"
    },
    {
        "$lookup": {
            "from": "fs.chunks",
            "localField": "file_info._id",
            "foreignField": "files_id",
            "as": "chunks"
        }
    },
    {
        "$project": {
            "name": 1,
            "file_info.filename": 1,
            "file_info.uploadDate": 1,
            "file_info.length": 1,
            "file_info.chunkSize": 1,
            "chunks.data": 1
        }
    }
]



Question 3:Suggest me something non veg?

Query:
json
[
    { "$match": { "name": "user_name" } },
    { "$unwind": "$addresses" },
    {
        "$lookup": {
            "from": "restaurants",
            "let": { "userLocation": "$addresses.googlePin", "userNonVegDays": "$nonVegDays" },
            "pipeline": [
                {
                    "$addFields": {
                        "distance": {
                            "$sqrt": {
                                "$sum": [
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 0] }, { "$convert": { "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 0] }, "to": "double" } }] }, 2] },
                                    { "$pow": [{ "$subtract": [{ "$arrayElemAt": ["$googlePin.coordinates", 1] }, { "$convert": { "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 1] }, "to": "double" } }] }, 2] }
                                ]
                            }
                        }
                    }
                },
                { "$sort": { "distance": 1 } },
                { "$limit": 1 }
            ],
            "as": "nearestRestaurant"
        }
    },
    { "$unwind": "$nearestRestaurant" },
    { "$unwind": "$nearestRestaurant.menu" },
    {
        "$match": {
            "$expr": {
                "$and": [
                    { "$in": [{ "$dayOfWeek": "$$NOW" }, "$userNonVegDays"] },
                    { "$in": [{ "$toLower": "$nearestRestaurant.menu.dish" }, ["chicken", "mutton", "fish", "egg", "beef", "pork"]] }
                ]
            }
        }
    },
    { "$limit": 4 },
    { "$project": { "nearestRestaurant.menu.dish": 1, "nearestRestaurant.menu.price": 1, "nearestRestaurant.name": 1, "distance": 1 } }
]


Question 4: Suggest me something in veg.

Query:
json
[
    { "$match": { "name": "user_name" } },
    { "$unwind": "$addresses" },
    {
        "$lookup": {
            "from": "restaurants",
            "let": { "userLocation": "$addresses.googlePin", "userNonVegDays": "$nonVegDays", "userVegDays": "$vegDays" },
            "pipeline": [
                {
                    "$addFields": {
                        "distance": {
                            "$sqrt": {
                                "$sum": [
                                    { 
                                        "$pow": [
                                            { 
                                                "$subtract": [
                                                    { "$arrayElemAt": ["$googlePin.coordinates", 0] }, 
                                                    { "$arrayElemAt": [{ "$convert": { "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 0] }, "to": "double" } }, 0] }
                                                ] 
                                            }, 
                                            2
                                        ] 
                                    },
                                    { 
                                        "$pow": [
                                            { 
                                                "$subtract": [
                                                    { "$arrayElemAt": ["$googlePin.coordinates", 1] }, 
                                                    { "$arrayElemAt": [{ "$convert": { "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 1] }, "to": "double" } }, 0] }
                                                ] 
                                            }, 
                                            2
                                        ] 
                                    }
                                ]
                            }
                        }
                    }
                },
                { "$sort": { "distance": 1 } },
                { "$limit": 1 }
            ],
            "as": "nearestRestaurant"
        }
    },
    { "$unwind": "$nearestRestaurant" },
    { "$unwind": "$nearestRestaurant.menu" },
    {
        "$facet": {
            "nonVegDishes": [
                {
                    "$match": {
                        "$expr": {
                            "$and": [
                                { "$in": [{ "$dayOfWeek": "$$NOW" }, "$$userNonVegDays"] },
                                { "$in": [{ "$toLower": "$nearestRestaurant.menu.dish" }, ["chicken", "mutton", "fish", "egg", "beef", "pork"]] }
                            ]
                        }
                    }
                },
                { "$limit": 4 }
            ],
            "vegDishes": [
                {
                    "$match": {
                        "$expr": {
                            "$and": [
                                { "$in": [{ "$dayOfWeek": "$$NOW" }, "$$userVegDays"] },
                                { "$not": { "$in": [{ "$toLower": "$nearestRestaurant.menu.dish" }, ["chicken", "mutton", "fish", "egg", "beef", "pork"]] } }
                            ]
                        }
                    }
                },
                { "$limit": 4 }
            ]
        }
    },
    {
        "$project": {
            "suggestions": {
                "$cond": {
                    "if": { "$gt": [{ "$size": "$nonVegDishes" }, 0] },
                    "then": "$nonVegDishes",
                    "else": "$vegDishes"
                }
            }
        }
    }
]



Question 5: Save the order to order collection on user's confirmation.

Query:
json
[
  {
    "$match": { "name": "user_name" },
    "$lookup": {
        "from": "restaurants",
        "let": { "userLocation": "$addresses.googlePin" },
        "pipeline": [
            {
                "$addFields": {
                    "distance": {
                        "$sqrt": {
                            "$sum": [
                                {
                                    "$pow": [
                                        {
                                            "$subtract": [
                                                { "$arrayElemAt": ["$googlePin.coordinates", 0] },
                                                {
                                                    "$arrayElemAt": [
                                                        {
                                                            "$convert": {
                                                                "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 0] },
                                                                "to": "double"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        2
                                    ]
                                },
                                {
                                    "$pow": [
                                        {
                                            "$subtract": [
                                                { "$arrayElemAt": ["$googlePin.coordinates", 1] },
                                                {
                                                    "$arrayElemAt": [
                                                        {
                                                            "$convert": {
                                                                "input": { "$arrayElemAt": [{ "$split": ["$$userLocation", ","] }, 1] },
                                                                "to": "double"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        2
                                    ]
                                }
                            ]
                        }
                    }
                }
            },
            { "$sort": { "distance": 1 } },
            { "$limit": 1 }
        ],
        "as": "nearestRestaurant"
    },
    "$unwind": "$nearestRestaurant",
    "$project": {
        "user_id": "$_id",
        "restaurant_id": "$nearestRestaurant._id",
        "dishes": "$nearestRestaurant.menu",
        "delivery_address": "$addresses.address",
        "google_pin_user": "$addresses.googlePin",
        "google_pin_restaurant": "$nearestRestaurant.googlePin",
        "distance_kms": {
            "$sqrt": {
                "$sum": [
                    {
                        "$pow": [
                            {
                                "$subtract": [
                                    { "$arrayElemAt": ["$nearestRestaurant.googlePin.coordinates", 0] },
                                    {
                                        "$arrayElemAt": [
                                            {
                                                "$convert": {
                                                    "input": { "$arrayElemAt": [{ "$split": ["$addresses.googlePin", ","] }, 0] },
                                                    "to": "double"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            2
                        ]
                    },
                    {
                        "$pow": [
                            {
                                "$subtract": [
                                    { "$arrayElemAt": ["$nearestRestaurant.googlePin.coordinates", 1] },
                                    {
                                        "$arrayElemAt": [
                                            {
                                                "$convert": {
                                                    "input": { "$arrayElemAt": [{ "$split": ["$addresses.googlePin", ","] }, 1] },
                                                    "to": "double"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            2
                        ]
                    }
                ]
            }
        },
        "upi_acknowledgement_id": "upi_ack_id_here",
        "upi_status": "success",
        "order_timestamp": { "$toDate": "$$NOW" }
    },
    "$merge": {
        "into": "orders",
        "whenMatched": "fail",
        "whenNotMatched": "insert"
    }
  }
]

Question 6: Tell me about my previous order.
Query:
json
[
    { "$match": { "name": "user_name" } },
    { "$lookup": {
        "from": "orders",
        "localField": "_id",
        "foreignField": "user_id",
        "as": "orderDetails"
    }},
    { "$unwind": "$orderDetails" },
    { "$sort": { "orderDetails.order_timestamp": -1 } }, 
    { "$project": {
        "_id": 0,
        "orderDetails": 1
    }}
]

Question 7: Tell me about my current order.
Query:
json
[
    { "$match": { "name": "user_name" } },
    { "$lookup": {
        "from": "orders",
        "localField": "_id",
        "foreignField": "user_id",
        "as": "orderDetails"
    }},
    { "$unwind": "$orderDetails" },
    { "$sort": { "orderDetails.order_timestamp": -1 } },  
    { "$limit": 1 },  
    { "$project": {
        "_id": 0,
        "orderDetails": 1
    }}
]

Question 8: Tell name by contact or email .
Query:
[
    {
        $match: {
            $or: [
                { "contact": "contact" },
                { "email": "email" }
            ]
        }
    },
    {
        $project: {
            _id: 0,
            name: 1
        }
    },
    {
        $limit: 1
    }
]

Question 8: Show image of dish or food.
Query:
[
    {
        "$match": { "name": "Gulab Jamun" }
    },
    {
        "$lookup": {
            "from": "food_images",
            "localField": "_id",
            "foreignField": "image_id",
            "as": "image_info"
        }
    },
    {
        "$unwind": "$image_info"
    },
    {
        "$lookup": {
            "from": "fs.files",
            "localField": "image_info.image_id",
            "foreignField": "_id",
            "as": "file_info"
        }
    },
    {
        "$unwind": "$file_info"
    },
    {
        "$lookup": {
            "from": "fs.chunks",
            "localField": "file_info._id",
            "foreignField": "files_id",
            "as": "chunks"
        }
    },
    {
        "$project": {
            "name": 1,
            "file_info.filename": 1,
            "file_info.uploadDate": 1,
            "file_info.length": 1,
            "file_info.chunkSize": 1,
            "chunks.data": 1
        }
    }
]

Question 9: Save new user details.
Query:
[{
    "insertOne": {
        "document": {
    "name": "Ramji",
    "dob": "1990-05-15",
    "email": "ramji.doe@example.com",
    "addresses": [
      {"address": "123 Work Street, Office Complex", "tag": "office"},
      {"address": "456 Home Avenue, Residential Area", "tag": "home"}
    ],
    "foodChoices": "Non-Veg",
    "foodPreferences": ["Chinese", "Italian"],
    "healthConditions": ["Diabetes"],
    "nonVegDays": ["Monday", "Thursday"]
  }
    }
}
]



Each of these queries is designed to run within MongoDB's aggregation framework to extract specific information based on the user's questions.
 The `$project` step is used to format the output to include only relevant fields. 